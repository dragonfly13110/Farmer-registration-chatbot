# 1_prepare_vectorstore.py (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 2 ‡πÑ‡∏ü‡∏•‡πå: FAQ + Knowledge Base)

import os
import re
import shutil

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LangChain ---
from langchain_community.document_loaders import Docx2txtLoader
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_core.documents import Document

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Word ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
FAQ_DOCX_PATH = "data/farmer_guide.docx"  # ‡πÑ‡∏ü‡∏•‡πå Q&A 100+ ‡∏Ç‡πâ‡∏≠
KB_DOCX_PATH = "data/knowledge_base.docx" # ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ 10 ‡∏ä‡πà‡∏ß‡∏á
VECTORSTORE_PATH = "vectorstore_combined" # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Vector Store ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
# ‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ Embedding Model ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
EMBEDDING_MODEL = "intfloat/multilingual-e5-large"

def create_qa_chunks(text: str) -> list[str]:
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Q&A (‡πÄ‡∏ä‡πà‡∏ô "1. ‡∏ñ‡∏≤‡∏°:")
    ‡πÉ‡∏ä‡πâ Regular Expression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç. ‡∏ñ‡∏≤‡∏°:"
    """
    # Pattern ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏≠‡∏á‡∏´‡∏≤ "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç. ‡∏ñ‡∏≤‡∏°:" ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç. ‡∏ñ‡∏≤‡∏°:" ‡∏≠‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ô‡∏à‡∏ö‡πÑ‡∏ü‡∏•‡πå
    pattern = re.compile(r"(\d{1,3}\.\s*‡∏ñ‡∏≤‡∏°:.*?(?=\n\d{1,3}\.\s*‡∏ñ‡∏≤‡∏°:|\Z))", re.DOTALL)
    
    qa_pairs = pattern.findall(text)
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å
    cleaned_pairs = [pair.strip() for pair in qa_pairs if pair.strip()]
    
    return cleaned_pairs

def main():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store
    """
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store ‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏° (Combined)...")
    all_documents = []

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå FAQ (Q&A) ---
    if os.path.exists(FAQ_DOCX_PATH):
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå FAQ: {FAQ_DOCX_PATH}")
        try:
            faq_loader = Docx2txtLoader(FAQ_DOCX_PATH)
            faq_text = faq_loader.load()[0].page_content
            faq_chunks = create_qa_chunks(faq_text)
            
            # ‡πÉ‡∏™‡πà Metadata ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå FAQ
            faq_docs = [Document(page_content=chunk, metadata={"source": "faq"}) for chunk in faq_chunks]
            all_documents.extend(faq_docs)
            print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• FAQ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏û‡∏ö {len(faq_docs)} ‡∏Ñ‡∏π‡πà Q&A")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå FAQ: {e}")
    else:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå FAQ ‡∏ó‡∏µ‡πà: {FAQ_DOCX_PATH}")

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå Knowledge Base (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢) ---
    if os.path.exists(KB_DOCX_PATH):
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå Knowledge Base: {KB_DOCX_PATH}")
        try:
            kb_loader = Docx2txtLoader(KB_DOCX_PATH)
            kb_documents = kb_loader.load()
            # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏ö‡∏ö Recursive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢
            text_splitter = RecursiveCharacterTextSplitter(chunk_size=600, chunk_overlap=150)
            kb_chunks = text_splitter.split_documents(kb_documents)
            
            # ‡πÉ‡∏™‡πà Metadata ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå KB
            for chunk in kb_chunks:
                chunk.metadata["source"] = "knowledge_base"
            all_documents.extend(kb_chunks)
            print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Knowledge Base ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏î‡πâ {len(kb_chunks)} chunks")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå Knowledge Base: {e}")
    else:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Knowledge Base ‡∏ó‡∏µ‡πà: {KB_DOCX_PATH}")

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store ---
    if not all_documents:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡πÜ ‡πÄ‡∏•‡∏¢! ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return

    print(f"\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store ‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_documents)} ‡∏ä‡∏¥‡πâ‡∏ô...")
    
    # ‡πÇ‡∏´‡∏•‡∏î Embedding Model
    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Embedding Model: {EMBEDDING_MODEL}")
    embeddings = HuggingFaceEmbeddings(model_name=EMBEDDING_MODEL)
    
    # ‡∏•‡∏ö Vector Store ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if os.path.exists(VECTORSTORE_PATH):
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö Vector Store ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà '{VECTORSTORE_PATH}'...")
        shutil.rmtree(VECTORSTORE_PATH)
        print("‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    db = FAISS.from_documents(all_documents, embeddings)
    db.save_local(VECTORSTORE_PATH)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store ‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {VECTORSTORE_PATH}")

if __name__ == "__main__":
    main()